name: Python application

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  checks:
    strategy:
      matrix:
        python-version: ['3.9']
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      id: python-version
      uses: actions/setup-python@v2
      with:
        python-version:  ${{ matrix.python-version }}
    - name: Install dependencies
      id: dependencies
      if: always()
      run: |
        python -m pip install --upgrade pip
        pip install flake8
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Lint with flake8
      id: flake8
      if: always()
      run: |
        flake8 tests/
        flake8 src/

    - name: send error message
      uses: appleboy/telegram-action@master
      if: failure()
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: "
          _____________________________________________________________

          Project: ${{ github.repository }}

          Author: ${{ github.actor }}

          Commit: ${{ github.sha }}

          Python ${{ matrix.python-version }}

          Pipeline finished with error.

          Steps details - ${{ toJson(steps) }}
        "
    - name: send success message
      uses: appleboy/telegram-action@master
      if: success()
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: "
          _____________________________________________________________

          Project: ${{ github.repository }}

          Author: ${{ github.actor }}

          Commit: ${{ github.sha }}

          Python ${{ matrix.python-version }}

          Pipeline finished successfully.
        "
  build_and_push_to_docker_hub:
      name: Push Docker image to Docker Hub
      runs-on: ubuntu-latest
      needs: checks
      steps:
        - name: Check out the repo
          # Проверка доступности репозитория Docker Hub для workflow
          uses: actions/checkout@v2
        - name: Set up Docker Buildx
          # Вызов сборщика контейнеров docker
          uses: docker/setup-buildx-action@v1
        - name: Login to Docker
          # Запуск скрипта авторизации на Docker Hub
          uses: docker/login-action@v1
          with:
            username: ${{ secrets.DOCKER_USERNAME }}
            password: ${{ secrets.DOCKER_PASSWORD }}
        - name: Push to Docker Hub
          # Пуш образа в Docker Hub
          uses: docker/build-push-action@v2
          with:
            push: true
            tags:  ${{ secrets.DOCKER_USERNAME }}/async_api:latest
  deploy:
      runs-on: ubuntu-latest
      needs: build_and_push_to_docker_hub
      steps:
        - name: executing remote ssh commands to deploy
          uses: appleboy/ssh-action@master
          with:
            host: ${{ secrets.SERVER_HOST }}
            username: ${{ secrets.SERVER_USERNAME }}
            key: ${{ secrets.SERVER_SSH_KEY }}
            passphrase: ${{ secrets.SERVER_PASSPHRASE }}
            script: |
              cd async_api
              sudo docker-compose down --rmi all
              rm .env
              touch .env
              echo AUTH_HOST=${{ secrets.AUTH_HOST }} >> .env
              echo MOVIES_INDEX=${{ secrets.MOVIES_INDEX }} >> .env
              echo GENRES_INDEX=${{ secrets.GENRES_INDEX }} >> .env
              echo PERSONS_INDEX=${{ secrets.PERSONS_INDEX }} >> .env
              echo SIZE=${{ secrets.SIZE }} >> .env
              echo POSTGRES_DB=${{ secrets.POSTGRES_DB }} >> .env
              echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
              echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
              echo POSTGRES_HOST=${{ secrets.POSTGRES_HOST }} >> .env
              echo POSTGRES_PORT=${{ secrets.POSTGRES_PORT }} >> .env
              echo PROJECT_NAME=${{ secrets.PROJECT_NAME }} >> .env
              echo REDIS_HOST=${{ secrets.REDIS_HOST }} >> .env
              echo REDIS_PORT=${{ secrets.REDIS_PORT }} >> .env
              echo FILM_CACHE_EXPIRE_IN_SECONDS=${{ secrets.FILM_CACHE_EXPIRE_IN_SECONDS }} >> .env
              echo REDIS_PROTOCOL=${{ secrets.REDIS_PROTOCOL }} >> .env
              echo ELASTIC_PORT=${{ secrets.ELASTIC_PORT }} >> .env
              echo ELASTIC_PROTOCOL=${{ secrets.ELASTIC_PROTOCOL }} >> .env
              echo SIZE_FOR_LOAD_TO_ELASTICSEARCH=${{ secrets.SIZE_FOR_LOAD_TO_ELASTICSEARCH }} >> .env
              echo ELASTIC_HOST=${{ secrets.ELASTIC_HOST }} >> .env
              sudo docker-compose up -d
